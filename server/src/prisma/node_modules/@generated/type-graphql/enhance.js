"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib_1 = require("tslib");
const tslib = (0, tslib_1.__importStar)(require("tslib"));
const crudResolvers = (0, tslib_1.__importStar)(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = (0, tslib_1.__importStar)(require("./resolvers/crud/args.index"));
const actionResolvers = (0, tslib_1.__importStar)(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = (0, tslib_1.__importStar)(require("./resolvers/relations/resolvers.index"));
const models = (0, tslib_1.__importStar)(require("./models"));
const outputTypes = (0, tslib_1.__importStar)(require("./resolvers/outputs"));
const inputTypes = (0, tslib_1.__importStar)(require("./resolvers/inputs"));
const crudResolversMap = {
    User: crudResolvers.UserCrudResolver,
    Exercise: crudResolvers.ExerciseCrudResolver,
    Workout: crudResolvers.WorkoutCrudResolver
};
const actionResolversMap = {
    User: {
        user: actionResolvers.FindUniqueUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        users: actionResolvers.FindManyUserResolver,
        createUser: actionResolvers.CreateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        deleteUser: actionResolvers.DeleteUserResolver,
        updateUser: actionResolvers.UpdateUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        upsertUser: actionResolvers.UpsertUserResolver,
        aggregateUser: actionResolvers.AggregateUserResolver,
        groupByUser: actionResolvers.GroupByUserResolver
    },
    Exercise: {
        exercise: actionResolvers.FindUniqueExerciseResolver,
        findFirstExercise: actionResolvers.FindFirstExerciseResolver,
        exercises: actionResolvers.FindManyExerciseResolver,
        createExercise: actionResolvers.CreateExerciseResolver,
        createManyExercise: actionResolvers.CreateManyExerciseResolver,
        deleteExercise: actionResolvers.DeleteExerciseResolver,
        updateExercise: actionResolvers.UpdateExerciseResolver,
        deleteManyExercise: actionResolvers.DeleteManyExerciseResolver,
        updateManyExercise: actionResolvers.UpdateManyExerciseResolver,
        upsertExercise: actionResolvers.UpsertExerciseResolver,
        aggregateExercise: actionResolvers.AggregateExerciseResolver,
        groupByExercise: actionResolvers.GroupByExerciseResolver
    },
    Workout: {
        workout: actionResolvers.FindUniqueWorkoutResolver,
        findFirstWorkout: actionResolvers.FindFirstWorkoutResolver,
        workouts: actionResolvers.FindManyWorkoutResolver,
        createWorkout: actionResolvers.CreateWorkoutResolver,
        createManyWorkout: actionResolvers.CreateManyWorkoutResolver,
        deleteWorkout: actionResolvers.DeleteWorkoutResolver,
        updateWorkout: actionResolvers.UpdateWorkoutResolver,
        deleteManyWorkout: actionResolvers.DeleteManyWorkoutResolver,
        updateManyWorkout: actionResolvers.UpdateManyWorkoutResolver,
        upsertWorkout: actionResolvers.UpsertWorkoutResolver,
        aggregateWorkout: actionResolvers.AggregateWorkoutResolver,
        groupByWorkout: actionResolvers.GroupByWorkoutResolver
    }
};
const crudResolversInfo = {
    User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
    Exercise: ["exercise", "findFirstExercise", "exercises", "createExercise", "createManyExercise", "deleteExercise", "updateExercise", "deleteManyExercise", "updateManyExercise", "upsertExercise", "aggregateExercise", "groupByExercise"],
    Workout: ["workout", "findFirstWorkout", "workouts", "createWorkout", "createManyWorkout", "deleteWorkout", "updateWorkout", "deleteManyWorkout", "updateManyWorkout", "upsertWorkout", "aggregateWorkout", "groupByWorkout"]
};
const argsInfo = {
    FindUniqueUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUserArgs: ["data"],
    CreateManyUserArgs: ["data", "skipDuplicates"],
    DeleteUserArgs: ["where"],
    UpdateUserArgs: ["data", "where"],
    DeleteManyUserArgs: ["where"],
    UpdateManyUserArgs: ["data", "where"],
    UpsertUserArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueExerciseArgs: ["where"],
    FindFirstExerciseArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyExerciseArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateExerciseArgs: ["data"],
    CreateManyExerciseArgs: ["data", "skipDuplicates"],
    DeleteExerciseArgs: ["where"],
    UpdateExerciseArgs: ["data", "where"],
    DeleteManyExerciseArgs: ["where"],
    UpdateManyExerciseArgs: ["data", "where"],
    UpsertExerciseArgs: ["where", "create", "update"],
    AggregateExerciseArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByExerciseArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueWorkoutArgs: ["where"],
    FindFirstWorkoutArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyWorkoutArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateWorkoutArgs: ["data"],
    CreateManyWorkoutArgs: ["data", "skipDuplicates"],
    DeleteWorkoutArgs: ["where"],
    UpdateWorkoutArgs: ["data", "where"],
    DeleteManyWorkoutArgs: ["where"],
    UpdateManyWorkoutArgs: ["data", "where"],
    UpsertWorkoutArgs: ["where", "create", "update"],
    AggregateWorkoutArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByWorkoutArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
                tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    User: relationResolvers.UserRelationsResolver,
    Exercise: relationResolvers.ExerciseRelationsResolver,
    Workout: relationResolvers.WorkoutRelationsResolver
};
const relationResolversInfo = {
    User: ["workouts"],
    Exercise: ["workouts"],
    Workout: ["exercises", "createdBy"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    User: ["id", "email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt"],
    Exercise: ["id", "name", "category", "part", "workoutId"],
    Workout: ["id", "name", "note", "isCompleted", "userId"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateUser: ["_count", "_avg", "_sum", "_min", "_max"],
    UserGroupBy: ["id", "email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateExercise: ["_count", "_avg", "_sum", "_min", "_max"],
    ExerciseGroupBy: ["id", "name", "category", "part", "workoutId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateWorkout: ["_count", "_avg", "_sum", "_min", "_max"],
    WorkoutGroupBy: ["id", "name", "note", "isCompleted", "userId", "_count", "_avg", "_sum", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    UserCount: ["workouts"],
    UserCountAggregate: ["id", "email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt", "_all"],
    UserAvgAggregate: ["id"],
    UserSumAggregate: ["id"],
    UserMinAggregate: ["id", "email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt"],
    UserMaxAggregate: ["id", "email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt"],
    ExerciseCount: ["workouts"],
    ExerciseCountAggregate: ["id", "name", "category", "part", "workoutId", "_all"],
    ExerciseAvgAggregate: ["id", "workoutId"],
    ExerciseSumAggregate: ["id", "workoutId"],
    ExerciseMinAggregate: ["id", "name", "category", "part", "workoutId"],
    ExerciseMaxAggregate: ["id", "name", "category", "part", "workoutId"],
    WorkoutCount: ["exercises"],
    WorkoutCountAggregate: ["id", "name", "note", "isCompleted", "userId", "_all"],
    WorkoutAvgAggregate: ["id", "userId"],
    WorkoutSumAggregate: ["id", "userId"],
    WorkoutMinAggregate: ["id", "name", "note", "isCompleted", "userId"],
    WorkoutMaxAggregate: ["id", "name", "note", "isCompleted", "userId"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    UserWhereInput: ["AND", "OR", "NOT", "id", "email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt", "workouts"],
    UserOrderByWithRelationInput: ["id", "email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt", "workouts"],
    UserWhereUniqueInput: ["id", "email", "username"],
    UserOrderByWithAggregationInput: ["id", "email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt"],
    ExerciseWhereInput: ["AND", "OR", "NOT", "id", "name", "category", "part", "workouts", "workoutId"],
    ExerciseOrderByWithRelationInput: ["id", "name", "category", "part", "workouts", "workoutId"],
    ExerciseWhereUniqueInput: ["id"],
    ExerciseOrderByWithAggregationInput: ["id", "name", "category", "part", "workoutId", "_count", "_avg", "_max", "_min", "_sum"],
    ExerciseScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "category", "part", "workoutId"],
    WorkoutWhereInput: ["AND", "OR", "NOT", "id", "name", "exercises", "note", "isCompleted", "createdBy", "userId"],
    WorkoutOrderByWithRelationInput: ["id", "name", "exercises", "note", "isCompleted", "createdBy", "userId"],
    WorkoutWhereUniqueInput: ["id"],
    WorkoutOrderByWithAggregationInput: ["id", "name", "note", "isCompleted", "userId", "_count", "_avg", "_max", "_min", "_sum"],
    WorkoutScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "note", "isCompleted", "userId"],
    UserCreateInput: ["email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt", "workouts"],
    UserUpdateInput: ["email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt", "workouts"],
    UserCreateManyInput: ["id", "email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt"],
    UserUpdateManyMutationInput: ["email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt"],
    ExerciseCreateInput: ["name", "category", "part", "workoutId", "workouts"],
    ExerciseUpdateInput: ["name", "category", "part", "workoutId", "workouts"],
    ExerciseCreateManyInput: ["id", "name", "category", "part", "workoutId"],
    ExerciseUpdateManyMutationInput: ["name", "category", "part", "workoutId"],
    WorkoutCreateInput: ["name", "note", "isCompleted", "exercises", "createdBy"],
    WorkoutUpdateInput: ["name", "note", "isCompleted", "exercises", "createdBy"],
    WorkoutCreateManyInput: ["id", "name", "note", "isCompleted", "userId"],
    WorkoutUpdateManyMutationInput: ["name", "note", "isCompleted"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    BoolFilter: ["equals", "not"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    WorkoutListRelationFilter: ["every", "some", "none"],
    WorkoutOrderByRelationAggregateInput: ["_count"],
    UserCountOrderByAggregateInput: ["id", "email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt"],
    UserAvgOrderByAggregateInput: ["id"],
    UserMaxOrderByAggregateInput: ["id", "email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt"],
    UserMinOrderByAggregateInput: ["id", "email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt"],
    UserSumOrderByAggregateInput: ["id"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    EnumCategoryFilter: ["equals", "in", "notIn", "not"],
    EnumBodyPartFilter: ["equals", "in", "notIn", "not"],
    IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    ExerciseCountOrderByAggregateInput: ["id", "name", "category", "part", "workoutId"],
    ExerciseAvgOrderByAggregateInput: ["id", "workoutId"],
    ExerciseMaxOrderByAggregateInput: ["id", "name", "category", "part", "workoutId"],
    ExerciseMinOrderByAggregateInput: ["id", "name", "category", "part", "workoutId"],
    ExerciseSumOrderByAggregateInput: ["id", "workoutId"],
    EnumCategoryWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumBodyPartWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    ExerciseListRelationFilter: ["every", "some", "none"],
    UserRelationFilter: ["is", "isNot"],
    ExerciseOrderByRelationAggregateInput: ["_count"],
    WorkoutCountOrderByAggregateInput: ["id", "name", "note", "isCompleted", "userId"],
    WorkoutAvgOrderByAggregateInput: ["id", "userId"],
    WorkoutMaxOrderByAggregateInput: ["id", "name", "note", "isCompleted", "userId"],
    WorkoutMinOrderByAggregateInput: ["id", "name", "note", "isCompleted", "userId"],
    WorkoutSumOrderByAggregateInput: ["id", "userId"],
    WorkoutCreateNestedManyWithoutCreatedByInput: ["create", "connectOrCreate", "createMany", "connect"],
    StringFieldUpdateOperationsInput: ["set"],
    BoolFieldUpdateOperationsInput: ["set"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    WorkoutUpdateManyWithoutCreatedByInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    WorkoutCreateNestedManyWithoutExercisesInput: ["create", "connectOrCreate", "connect"],
    EnumCategoryFieldUpdateOperationsInput: ["set"],
    EnumBodyPartFieldUpdateOperationsInput: ["set"],
    NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    WorkoutUpdateManyWithoutExercisesInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ExerciseCreateNestedManyWithoutWorkoutsInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutWorkoutsInput: ["create", "connectOrCreate", "connect"],
    ExerciseUpdateManyWithoutWorkoutsInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserUpdateOneRequiredWithoutWorkoutsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedBoolFilter: ["equals", "not"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedEnumCategoryFilter: ["equals", "in", "notIn", "not"],
    NestedEnumBodyPartFilter: ["equals", "in", "notIn", "not"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedEnumCategoryWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumBodyPartWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    WorkoutCreateWithoutCreatedByInput: ["name", "note", "isCompleted", "exercises"],
    WorkoutCreateOrConnectWithoutCreatedByInput: ["where", "create"],
    WorkoutCreateManyCreatedByInputEnvelope: ["data", "skipDuplicates"],
    WorkoutUpsertWithWhereUniqueWithoutCreatedByInput: ["where", "update", "create"],
    WorkoutUpdateWithWhereUniqueWithoutCreatedByInput: ["where", "data"],
    WorkoutUpdateManyWithWhereWithoutCreatedByInput: ["where", "data"],
    WorkoutScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "note", "isCompleted", "userId"],
    WorkoutCreateWithoutExercisesInput: ["name", "note", "isCompleted", "createdBy"],
    WorkoutCreateOrConnectWithoutExercisesInput: ["where", "create"],
    WorkoutUpsertWithWhereUniqueWithoutExercisesInput: ["where", "update", "create"],
    WorkoutUpdateWithWhereUniqueWithoutExercisesInput: ["where", "data"],
    WorkoutUpdateManyWithWhereWithoutExercisesInput: ["where", "data"],
    ExerciseCreateWithoutWorkoutsInput: ["name", "category", "part", "workoutId"],
    ExerciseCreateOrConnectWithoutWorkoutsInput: ["where", "create"],
    UserCreateWithoutWorkoutsInput: ["email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutWorkoutsInput: ["where", "create"],
    ExerciseUpsertWithWhereUniqueWithoutWorkoutsInput: ["where", "update", "create"],
    ExerciseUpdateWithWhereUniqueWithoutWorkoutsInput: ["where", "data"],
    ExerciseUpdateManyWithWhereWithoutWorkoutsInput: ["where", "data"],
    ExerciseScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "category", "part", "workoutId"],
    UserUpsertWithoutWorkoutsInput: ["update", "create"],
    UserUpdateWithoutWorkoutsInput: ["email", "firstName", "lastName", "username", "password", "verified", "createdAt", "updatedAt"],
    WorkoutCreateManyCreatedByInput: ["id", "name", "note", "isCompleted"],
    WorkoutUpdateWithoutCreatedByInput: ["name", "note", "isCompleted", "exercises"],
    WorkoutUpdateWithoutExercisesInput: ["name", "note", "isCompleted", "createdBy"],
    ExerciseUpdateWithoutWorkoutsInput: ["name", "category", "part", "workoutId"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
