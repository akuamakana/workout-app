"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExerciseCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateExerciseArgs_1 = require("./args/AggregateExerciseArgs");
const CreateExerciseArgs_1 = require("./args/CreateExerciseArgs");
const CreateManyExerciseArgs_1 = require("./args/CreateManyExerciseArgs");
const DeleteExerciseArgs_1 = require("./args/DeleteExerciseArgs");
const DeleteManyExerciseArgs_1 = require("./args/DeleteManyExerciseArgs");
const FindFirstExerciseArgs_1 = require("./args/FindFirstExerciseArgs");
const FindManyExerciseArgs_1 = require("./args/FindManyExerciseArgs");
const FindUniqueExerciseArgs_1 = require("./args/FindUniqueExerciseArgs");
const GroupByExerciseArgs_1 = require("./args/GroupByExerciseArgs");
const UpdateExerciseArgs_1 = require("./args/UpdateExerciseArgs");
const UpdateManyExerciseArgs_1 = require("./args/UpdateManyExerciseArgs");
const UpsertExerciseArgs_1 = require("./args/UpsertExerciseArgs");
const helpers_1 = require("../../../helpers");
const Exercise_1 = require("../../../models/Exercise");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateExercise_1 = require("../../outputs/AggregateExercise");
const ExerciseGroupBy_1 = require("../../outputs/ExerciseGroupBy");
let ExerciseCrudResolver = class ExerciseCrudResolver {
    async exercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async exercises(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateExercise(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByExercise(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Exercise_1.Exercise, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueExerciseArgs_1.FindUniqueExerciseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "exercise", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Exercise_1.Exercise, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstExerciseArgs_1.FindFirstExerciseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "findFirstExercise", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [Exercise_1.Exercise], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyExerciseArgs_1.FindManyExerciseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "exercises", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Exercise_1.Exercise, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateExerciseArgs_1.CreateExerciseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "createExercise", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyExerciseArgs_1.CreateManyExerciseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "createManyExercise", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Exercise_1.Exercise, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteExerciseArgs_1.DeleteExerciseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "deleteExercise", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Exercise_1.Exercise, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateExerciseArgs_1.UpdateExerciseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "updateExercise", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyExerciseArgs_1.DeleteManyExerciseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "deleteManyExercise", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyExerciseArgs_1.UpdateManyExerciseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "updateManyExercise", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Exercise_1.Exercise, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertExerciseArgs_1.UpsertExerciseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "upsertExercise", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateExercise_1.AggregateExercise, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateExerciseArgs_1.AggregateExerciseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "aggregateExercise", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [ExerciseGroupBy_1.ExerciseGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByExerciseArgs_1.GroupByExerciseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "groupByExercise", null);
ExerciseCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => Exercise_1.Exercise)
], ExerciseCrudResolver);
exports.ExerciseCrudResolver = ExerciseCrudResolver;
