import { GraphQLResolveInfo } from "graphql";
import { AggregateWorkoutArgs } from "./args/AggregateWorkoutArgs";
import { CreateManyWorkoutArgs } from "./args/CreateManyWorkoutArgs";
import { CreateWorkoutArgs } from "./args/CreateWorkoutArgs";
import { DeleteManyWorkoutArgs } from "./args/DeleteManyWorkoutArgs";
import { DeleteWorkoutArgs } from "./args/DeleteWorkoutArgs";
import { FindFirstWorkoutArgs } from "./args/FindFirstWorkoutArgs";
import { FindManyWorkoutArgs } from "./args/FindManyWorkoutArgs";
import { FindUniqueWorkoutArgs } from "./args/FindUniqueWorkoutArgs";
import { GroupByWorkoutArgs } from "./args/GroupByWorkoutArgs";
import { UpdateManyWorkoutArgs } from "./args/UpdateManyWorkoutArgs";
import { UpdateWorkoutArgs } from "./args/UpdateWorkoutArgs";
import { UpsertWorkoutArgs } from "./args/UpsertWorkoutArgs";
import { Workout } from "../../../models/Workout";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateWorkout } from "../../outputs/AggregateWorkout";
import { WorkoutGroupBy } from "../../outputs/WorkoutGroupBy";
export declare class WorkoutCrudResolver {
    workout(ctx: any, info: GraphQLResolveInfo, args: FindUniqueWorkoutArgs): Promise<Workout | null>;
    findFirstWorkout(ctx: any, info: GraphQLResolveInfo, args: FindFirstWorkoutArgs): Promise<Workout | null>;
    workouts(ctx: any, info: GraphQLResolveInfo, args: FindManyWorkoutArgs): Promise<Workout[]>;
    createWorkout(ctx: any, info: GraphQLResolveInfo, args: CreateWorkoutArgs): Promise<Workout>;
    createManyWorkout(ctx: any, info: GraphQLResolveInfo, args: CreateManyWorkoutArgs): Promise<AffectedRowsOutput>;
    deleteWorkout(ctx: any, info: GraphQLResolveInfo, args: DeleteWorkoutArgs): Promise<Workout | null>;
    updateWorkout(ctx: any, info: GraphQLResolveInfo, args: UpdateWorkoutArgs): Promise<Workout | null>;
    deleteManyWorkout(ctx: any, info: GraphQLResolveInfo, args: DeleteManyWorkoutArgs): Promise<AffectedRowsOutput>;
    updateManyWorkout(ctx: any, info: GraphQLResolveInfo, args: UpdateManyWorkoutArgs): Promise<AffectedRowsOutput>;
    upsertWorkout(ctx: any, info: GraphQLResolveInfo, args: UpsertWorkoutArgs): Promise<Workout>;
    aggregateWorkout(ctx: any, info: GraphQLResolveInfo, args: AggregateWorkoutArgs): Promise<AggregateWorkout>;
    groupByWorkout(ctx: any, info: GraphQLResolveInfo, args: GroupByWorkoutArgs): Promise<WorkoutGroupBy[]>;
}
